diff --git a/modules/desktop_capture/window_capturer_mac.mm b/modules/desktop_capture/window_capturer_mac.mm
index cbdf14b..f853a72 100644
--- modules/desktop_capture/window_capturer_mac.mm
+++ modules/desktop_capture/window_capturer_mac.mm
@@ -42,6 +42,60 @@ bool IsWindowValid(CGWindowID id) {
   return valid;
 }
 
+// Due to https://chromium.googlesource.com/external/webrtc/trunk/webrtc/+/f51950f4500a6a6b9a44499f1a852db60b7f76ef,
+// the window list without `kCGWindowListOptionOnScreenOnly` option does not
+// preserve the order.
+// This patch sorts windows by checking the order returned with this option:
+// * visible windows are ordered by its index (front to back)
+// * non visible windows (full screen windows) are greater than visible windows
+// * for two non visible windows, windows are sorted by its id
+class WindowSorter {
+public:
+  WindowSorter();
+  ~WindowSorter();
+  bool operator() (WindowCapturer::Window a, WindowCapturer::Window b);
+private:
+  std::map<int,CFIndex> id_index_map_;
+};
+
+WindowSorter::WindowSorter() {
+  CFArrayRef window_array = CGWindowListCopyWindowInfo(
+      kCGWindowListOptionOnScreenOnly | kCGWindowListExcludeDesktopElements,
+      kCGNullWindowID);
+  CFIndex count = CFArrayGetCount(window_array);
+  for (CFIndex i = 0; i < count; ++i) {
+    CFDictionaryRef window = reinterpret_cast<CFDictionaryRef>(
+        CFArrayGetValueAtIndex(window_array, i));
+    CFNumberRef window_id = reinterpret_cast<CFNumberRef>(
+        CFDictionaryGetValue(window, kCGWindowNumber));
+    if (window_id) {
+      int id;
+      CFNumberGetValue(window_id, kCFNumberIntType, &id);
+      id_index_map_[id] = i;
+    }
+  }
+  CFRelease(window_array);
+}
+
+WindowSorter::~WindowSorter() {}
+
+bool WindowSorter::operator() (WindowCapturer::Window a, WindowCapturer::Window b) {
+  auto a_index = id_index_map_.find(a.id);
+  auto b_index = id_index_map_.find(b.id);
+  if (a_index == id_index_map_.end() || b_index == id_index_map_.end()) {
+    if (a_index != id_index_map_.end()) {
+      return true;
+    } else if (b_index != id_index_map_.end()) {
+      return false;
+    } else {
+      return a.id < b.id;
+    }
+
+  } else {
+    return a_index->second < b_index->second;
+  }
+}
+
 class WindowCapturerMac : public WindowCapturer {
  public:
   explicit WindowCapturerMac(rtc::scoped_refptr<FullScreenChromeWindowDetector>
@@ -120,6 +174,9 @@ explicit WindowCapturerMac(rtc::scoped_refptr<FullScreenChromeWindowDetector>
       windows->push_back(window);
     }
   }
+  
+  WindowSorter sortByOrder;
+  std::sort(windows->begin(), windows->end(), sortByOrder);
 
   CFRelease(window_array);
   return true;

